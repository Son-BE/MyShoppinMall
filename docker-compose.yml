version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: shop-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: hi092787!!!
      MYSQL_DATABASE: SonStar
      MYSQL_USER: SonStar
      MYSQL_PASSWORD: hi092787!!!
    ports:
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - shop-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7.0
    container_name: shop-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - shop-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  recommend-api:
    build:
      context: ./flask-api
      dockerfile: Dockerfile
    image: recommend-api
    container_name: recommend-api
    restart: always
    ports:
      - "5000:5000"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      MYSQL_HOST: shop-mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: SonStar
      MYSQL_USER: root
      MYSQL_PASSWORD: hi092787!!!
      REDIS_HOST: shop-redis
      REDIS_PORT: 6379
      PYTHON_UNBUFFERED: 1
    networks:
      - shop-network
    volumes:
      - recommend-data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  image-classifier-api:
    build:
      context: ./image-classifier
      dockerfile: Dockerfile
    image: image-classifier-api
    container_name: image-classifier-api
    restart: always
    ports:
      - "5051:5000"
    environment:
      FLASK_ENV: production
      PYTHONUNBUFFERED: 1
      MODEL_PATH: /app/models/fashion_classifier.pth
      CUDA_VISIBLE_DEVICES: "0"
    networks:
      - shop-network
    volumes:
      - classifier-models:/app/models
      - classifier-logs:/app/logs
      - /usr/local/cuda:/usr/local/cuda:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  springboot:
    build:
      context: .
      dockerfile: Dockerfile
    image: myshop-app
    container_name: shop-app
    restart: always
    ports:
      - "8080:8080"
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      recommend-api:
        condition: service_healthy
      image-classifier-api:
        condition: service_healthy
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://shop-mysql:3306/${MYSQL_DATABASE}
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_DATA_REDIS_HOST: ${REDIS_HOST}
      SPRING_DATA_REDIS_PORT: ${REDIS_PORT}
      CLOUD_AWS_CREDENTIALS_ACCESS_KEY: ${AWS_ACCESS_KEY_ID}
      CLOUD_AWS_CREDENTIALS_SECRET_KEY: ${AWS_SECRET_ACCESS_KEY}
      CLOUD_AWS_REGION_STATIC: ${AWS_REGION}
      CLOUD_AWS_S3_BUCKET: ${AWS_BUCKET}
      RECOMMENDATION_API_URL: http://recommend-api:5000
      AI_CLASSIFIER_URL: http://image-classifier-api:5000
      JAVA_OPTS: "-Dcom.amazonaws.sdk.disableEc2Metadata=true -Dcom.amazonaws.services.s3.disableGetObjectMD5Validation=true -Djdk.management.jfr.allowed=false -XX:+UnlockExperimentalVMOptions -XX:+UseContainerSupport -Djava.lang.management.ManagementFactory.disableCgroupMetrics=true"

    networks:
      - shop-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  mysql-data:
  redis-data:
  recommend-data:
  classifier-models:
  classifier-logs:

networks:
  shop-network:
    name: shop-network
    driver: bridge
