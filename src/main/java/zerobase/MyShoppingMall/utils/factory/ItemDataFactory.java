package zerobase.MyShoppingMall.utils.factory;

import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import zerobase.MyShoppingMall.entity.Item;
import zerobase.MyShoppingMall.type.*;

import java.time.LocalDateTime;
import java.util.List;

@Slf4j
@Component
public class ItemDataFactory extends BaseDataFactory<Item> {

    @Override
    public Item createSingle() {
        Gender gender = randomEnum(Gender.class);
        ItemCategory category = generateCategoryByGender(gender);
        ItemSubCategory subCategory = generateSubCategoryByCategory(category);
        Styles style = randomEnum(Styles.class);
        Season season = randomEnum(Season.class);
        AgeGroup ageGroup = randomEnum(AgeGroup.class);

        String productName = productNameGenerator.generateProductName(gender, category, style);
        String description = productNameGenerator.generateProductDescription(productName, gender, style, season);

        int basePrice = generateRealisticPrice(category, style);
        int quantity = generateRealisticQuantity();

        // ÌÜµÍ≥Ñ Îç∞Ïù¥ÌÑ∞ (ÏÑúÎ°ú Ïó∞Í¥ÄÏÑ± ÏûàÍ≤å ÏÉùÏÑ±)
        int viewCount = generateViewCount();
        int cartCount = (int) (viewCount * (0.1 + random.nextDouble() * 0.2)); // 10-30% Ïû•Î∞îÍµ¨Îãà Ï∂îÍ∞Ä
        int orderCount = (int) (cartCount * (0.3 + random.nextDouble() * 0.4)); // 30-70% Íµ¨Îß§
        int reviewCount = (int) (orderCount * (0.2 + random.nextDouble() * 0.6)); // 20-80% Î¶¨Î∑∞
        int wishCount = (int) (viewCount * (0.05 + random.nextDouble() * 0.15)); // 5-20% ÏúÑÏãúÎ¶¨Ïä§Ìä∏

        double rating = generateRealisticRating(reviewCount);

        return Item.builder()
                .itemName(productName)
                .itemComment(description)
                .gender(gender)
                .category(category)
                .subCategory(subCategory)
                .style(style)
                .season(season)
                .ageGroup(ageGroup)
                .price(basePrice)
                .quantity(quantity)
                .viewCount(viewCount)
                .cartCount(cartCount)
                .orderCount(orderCount)
                .reviewCount(reviewCount)
                .wishCount(wishCount)
                .itemRating((int) rating)
                .deleteType('N')
                .createdAt(generateRealisticCreatedDate())
                .build();
    }

    public List<Item> createBatch(int size) {
        List<Item> items = super.createBatch(size);
        log.info("üß™ ItemDataFactory ‚Üí createBatch({}) ‚Üí Ïã§Ï†ú ÏÉùÏÑ±: {}Í∞ú", size, items.size());
        return items;
    }


    @Override
    public Item createWithSpecificData(Object... params) {
        return null;
    }

    private ItemCategory generateCategoryByGender(Gender gender) {
        ItemCategory[] categories;

        if (gender == Gender.MALE) {
            categories = new ItemCategory[]{
                    ItemCategory.MENS_TOP,
                    ItemCategory.MENS_BOTTOM,
                    ItemCategory.MENS_OUTER,
                    ItemCategory.MENS_SHOES,
                    ItemCategory.MENS_ACCESSORY
            };
        } else {
            categories = new ItemCategory[]{
                    ItemCategory.WOMENS_TOP,
                    ItemCategory.WOMENS_BOTTOM,
                    ItemCategory.WOMENS_OUTER,
                    ItemCategory.WOMENS_SHOES,
                    ItemCategory.WOMENS_ACCESSORY
            };
        }

        return categories[random.nextInt(categories.length)];
    }

    private ItemSubCategory generateSubCategoryByCategory(ItemCategory category) {
        switch (category) {
            case MENS_TOP:
                ItemSubCategory[] mensTops = {
                        ItemSubCategory.M_TSHIRT, ItemSubCategory.M_SWEATSHIRT,
                        ItemSubCategory.M_SHIRT, ItemSubCategory.M_HOODIE,
                        ItemSubCategory.M_SHORTS
                };
                return mensTops[random.nextInt(mensTops.length)];

            case WOMENS_TOP:
                ItemSubCategory[] womensTops = {
                        ItemSubCategory.W_TSHIRT, ItemSubCategory.W_SWEATSHIRT,
                        ItemSubCategory.W_BLOUSE, ItemSubCategory.W_HOODIE,
                        ItemSubCategory.W_SHORTS
                };
                return womensTops[random.nextInt(womensTops.length)];

            case MENS_BOTTOM:
                ItemSubCategory[] mensBottoms = {
                        ItemSubCategory.M_JEANS,
                        ItemSubCategory.M_TRAINING_PANTS,
                        ItemSubCategory.M_JOGGER_PANTS,
                        ItemSubCategory.M_SLACKS
                };
                return mensBottoms[random.nextInt(mensBottoms.length)];

            case WOMENS_BOTTOM:
                ItemSubCategory[] womensBottoms = {
                        ItemSubCategory.W_JEANS,
                        ItemSubCategory.W_TRAINING_PANTS,
                        ItemSubCategory.W_JOGGER_PANTS,
                        ItemSubCategory.W_SKIRTS,
                        ItemSubCategory.W_SKIRT,
                        ItemSubCategory.W_SLACKS
                };
                return womensBottoms[random.nextInt(womensBottoms.length)];

            case MENS_OUTER:
                ItemSubCategory[] mensOuters = {
                        ItemSubCategory.M_WINDBREAKER,
                        ItemSubCategory.M_COAT,
                        ItemSubCategory.M_PADDING
                };
                return mensOuters[random.nextInt(mensOuters.length)];

            case WOMENS_OUTER:
                ItemSubCategory[] womensOuters = {
                        ItemSubCategory.W_WINDBREAKER,
                        ItemSubCategory.W_COAT,
                        ItemSubCategory.W_PADDING
                };
                return womensOuters[random.nextInt(womensOuters.length)];

            case MENS_SHOES:
                ItemSubCategory[] mensShoes = {
                        ItemSubCategory.M_SNEAKERS,
                        ItemSubCategory.M_RUNNING_SHOES,
                        ItemSubCategory.M_BOOTS
                };
                return mensShoes[random.nextInt(mensShoes.length)];

            case WOMENS_SHOES:
                ItemSubCategory[] womensShoes = {
                        ItemSubCategory.W_SNEAKERS,
                        ItemSubCategory.W_RUNNING_SHOES,
                        ItemSubCategory.W_BOOTS
                };
                return womensShoes[random.nextInt(womensShoes.length)];

            case MENS_ACCESSORY:
                ItemSubCategory[] mensAccessories = {
                        ItemSubCategory.M_WATCH,
                        ItemSubCategory.M_RING,
                        ItemSubCategory.M_NECKLACE
                };
                return mensAccessories[random.nextInt(mensAccessories.length)];

            case WOMENS_ACCESSORY:
                ItemSubCategory[] womensAccessories = {
                        ItemSubCategory.W_WATCH,
                        ItemSubCategory.W_RING,
                        ItemSubCategory.W_NECKLACE
                };
                return womensAccessories[random.nextInt(womensAccessories.length)];

            default:
                return ItemSubCategory.M_TSHIRT; // fallback
        }
    }

    private int generateRealisticPrice(ItemCategory category, Styles style) {
        int basePrice;

        // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Í∏∞Î≥∏ Í∞ÄÍ≤©ÎåÄ
        switch (category) {
            case MENS_SHOES:
            case WOMENS_SHOES:
                basePrice = 15000 + random.nextInt(35000); // 15,000 ~ 50,000
                break;
            case MENS_ACCESSORY:
            case WOMENS_ACCESSORY:
                basePrice = 25000 + random.nextInt(55000); // 25,000 ~ 80,000
                break;
            case MENS_OUTER:
            case WOMENS_OUTER:
                basePrice = 35000 + random.nextInt(35000);
                break;
            default:
                basePrice = 20000 + random.nextInt(30000);
        }

        // Ïä§ÌÉÄÏùºÎ≥Ñ Í∞ÄÍ≤© Ï°∞Ï†ï
        switch (style) {
            case FORMAL:
                basePrice = (int) (basePrice * 1.5); // Ï†ïÏû•ÏùÄ 50% Îçî ÎπÑÏã∏Í≤å
                break;
            case VINTAGE:
                basePrice = (int) (basePrice * 1.2); // ÎπàÌã∞ÏßÄÎäî 20% Îçî ÎπÑÏã∏Í≤å
                break;
            case CASUAL:
                basePrice = (int) (basePrice * 0.8); // Ï∫êÏ£ºÏñºÏùÄ 20% Îçî Ïã∏Í≤å
                break;
        }

        // 1000Ïõê Îã®ÏúÑÎ°ú Ï°∞Ï†ï
        return (basePrice / 1000) * 1000;
    }

    private int generateRealisticQuantity() {
        // Ïû¨Í≥† Î∂ÑÌè¨Î•º ÌòÑÏã§Ï†ÅÏúºÎ°ú
        double rand = random.nextDouble();
        if (rand < 0.1) return 0; // 10% ÌíàÏ†à
        if (rand < 0.3) return 1 + random.nextInt(5); // 20% ÏÜåÎüâ Ïû¨Í≥†
        if (rand < 0.8) return 10 + random.nextInt(40); // 50% ÏùºÎ∞ò Ïû¨Í≥†
        return 50 + random.nextInt(100); // 20% ÎåÄÎüâ Ïû¨Í≥†
    }

    private int generateViewCount() {
        // Î°úÍ∑∏ Ï†ïÍ∑úÎ∂ÑÌè¨Î•º Îî∞Î•¥Îäî Ï°∞ÌöåÏàò
        double logNormal = Math.exp(random.nextGaussian() * 0.5 + 4); // ÌèâÍ∑† ÏïΩ 100
        return Math.max(1, (int) logNormal);
    }

    private double generateRealisticRating(int reviewCount) {
        if (reviewCount == 0) return 0.0;

        // ÌèâÏ†êÏùÄ Î≥¥ÌÜµ 3.0 ~ 5.0 ÏÇ¨Ïù¥Ïóê Î™∞Î¶º
        double baseRating = 3.0 + random.nextGaussian() * 0.8;
        baseRating = Math.max(1.0, Math.min(5.0, baseRating));

        // ÏÜåÏàòÏ†ê Ìïú ÏûêÎ¶¨Î°ú Î∞òÏò¨Î¶º
        return Math.round(baseRating * 10.0) / 10.0;
    }

    private LocalDateTime generateRealisticCreatedDate() {
        // ÏµúÍ∑º 1ÎÖÑ ÎÇ¥Ïùò ÎÇ†Ïßú ÏÉùÏÑ± (Ïã†ÏÉÅÌíàÏù¥ Îçî ÎßéÎèÑÎ°ù)
        int daysAgo = (int) Math.abs(random.nextGaussian() * 60); // ÌèâÍ∑† 60Ïùº Ï†Ñ
        daysAgo = Math.min(365, daysAgo); // ÏµúÎåÄ 1ÎÖÑ Ï†Ñ

        return LocalDateTime.now().minusDays(daysAgo);
    }
}

